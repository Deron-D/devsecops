include:
  - template: Security/Secret-Detection.gitlab-ci.yml

stages:
  - pre-build
  - build
  - post-build
  - test
  - deploy
variables:
  IMAGE_NAME: ${CI_REGISTRY}/${CI_COMMIT_REF_SLUG}
  APP_NAME: owasp10
  GITLAB_AGENT: "$CI_PROJECT_PATH:gitlab-agent"

secret_detection:
  stage: pre-build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  variables:
    SECRET_DETECTION_HISTORIC_SCAN: "true"
    GIT_STRATEGY: "clone"
  allow_failure: true
  script:
    - apk add jq
    - /analyzer run
    - exit $(eval "cat gl-secret-detection-report.json | jq --raw-output '.vulnerabilities | length'")

semgrep:
  stage: pre-build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  image: semgrep/semgrep
  allow_failure: true
  before_script:
    - mkdir .reports
  script:
    - semgrep --json --json-output=.reports/semgrep.json --config auto .
  artifacts:
    when: always
    expire_in: "1 days"
    paths:
      - ".reports/"

build_docker_image:
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  variables:
    DOCKER_CUSTOM_SUBFOLDER: "" # Specify a custom path (if any) to your folder with docker files.
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    #- echo export IMAGE_ID=$(yc container image list --registry-id $(echo ${CI_REGISTRY} | cut -d/ -f2) --format=json | jq -r --arg CI_COMMIT_SHA $CI_COMMIT_SHA '.[] | select(.tags[0]==$CI_COMMIT_SHA) | .id ')
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(echo -n "json_key:${CI_REGISTRY_KEY}" | base64 | tr -d '\n' )\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --cache=true
      --cache-copy-layers=true
      --cache-run-layers=true
      --cache-repo=${IMAGE_NAME}-cache
      --context "${CI_PROJECT_DIR}"/"${DOCKER_CUSTOM_SUBFOLDER}"
      --dockerfile "${CI_PROJECT_DIR}/"${DOCKER_CUSTOM_SUBFOLDER}"/Dockerfile"
      --destination "${IMAGE_NAME}:${CI_COMMIT_SHA}"

container_scanning:
  image: 
    name: pindar/jq
    entrypoint: [""]
  stage: post-build
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  allow_failure: true
  artifacts:
    when: always
    paths:
      - gl-container-scanning-report-yc.json
  script:
    - export CI_COMMIT_SHA=${CI_COMMIT_SHA}
    # Install YC CLI.
    - curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a && cp /root/yandex-cloud/bin/yc /usr/bin/
    # Start scanning.
    - echo "Scanning image $IMAGE_NAME:${CI_COMMIT_SHA} ${CI_REGISTRY}/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}..."
    - export IMAGE_ID=$(yc container image list --registry-id $(echo ${CI_REGISTRY} | cut -d/ -f2) --format=json | jq -r --arg CI_COMMIT_SHA $CI_COMMIT_SHA '.[] | select(.tags[0]==$CI_COMMIT_SHA) | .id ')
    # Make a report.
    - export SCAN_RESULT=$(yc container image scan $IMAGE_ID --format=json)
    - export CRIT_VULN=$(echo $SCAN_RESULT | jq -r '.vulnerabilities.critical // 0')
    - export HIGH_VULN=$(echo $SCAN_RESULT | jq -r '.vulnerabilities.high // 0')
    - export SCAN_ID=$(echo $SCAN_RESULT | jq -r '.id')
    - echo "Scan results:"
    - yc container image list-vulnerabilities --scan-result-id="${SCAN_ID}" --format json | jq -r '.[] | select(.severity=="CRITICAL", .severity=="HIGH")'
    - yc container image list-vulnerabilities --scan-result-id="${SCAN_ID}" --format json | jq -r '.[] | select(.severity=="CRITICAL", .severity=="HIGH")' > gl-container-scanning-report-yc.json
    # Check the result.
    - (( SUM = $CRIT_VULN + $HIGH_VULN )) && (( RES = (SUM >= 1) )) && echo $RES && echo "image has $CRIT_VULN critical vulns and $HIGH_VULN high vulns" && exit 1 || echo "image has no high or crit vulns" exit 0

.deploy:
  image: dtzar/helm-kubectl:latest
  before_script:
    - kubectl config use-context $GITLAB_AGENT

test:
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  script:
    - echo "Test succeed"

dast-prepare:
  extends: .deploy
  stage: test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  script:
    - APP_HOST=${CI_PROJECT_NAME}-dast.$DOMAIN_NAME
    - helm upgrade --install $APP_NAME-dast ./k8s/owasp10
      --namespace $APP_NAME-dast
      --create-namespace
      --set owasp10.image=$IMAGE_NAME:${CI_COMMIT_SHA}
      --atomic
      --set owasp10.ingress.host=$APP_HOST
    - echo "APP_ADDRESS is $APP_HOST"
    - echo "APP_ADDRESS=$APP_HOST" >> app.env
  artifacts:
    reports:
      dotenv: app.env

dast-scan:
  stage: test
  needs: ["dast-prepare"]
  image:
    name: zaproxy/zap-stable:2.15.0
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  script:
    - mkdir -p /zap/wrk
    - zap-full-scan.py -t "http://${APP_ADDRESS}" -I -J zap.json
    - cp /zap/wrk/zap.json .
  artifacts:
    when: always
    paths:
      - zap.json

deploy:
  extends: .deploy
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  script:
    - APP_HOST=${CI_PROJECT_NAME}.$DOMAIN_NAME
    - helm upgrade --install $APP_NAME ./k8s/owasp10
      --namespace $APP_NAME
      --create-namespace
      --set owasp10.image=$IMAGE_NAME:${CI_COMMIT_SHA}
      --atomic
      --set owasp10.ingress.host=$APP_HOST
    - echo "APP_ADDRESS is $APP_HOST"